import { Component, OnInit, OnChanges, SimpleChanges, Input, Type } from "@angular/core";
import { FormGroup, FormBuilder, Validators } from "@angular/forms";
import { Router } from "@angular/router";
import { IPropertyEditInfo } from "./IPropertyEditInfo";
import { GetMetadataComponentType } from "./metadata/MetadataComponentFactory";
import { DataTypes } from "../../../../../core/data/interfaces/DataTypes";
import { Comparability } from "../../../../../core/data/interfaces/Comparability";
import { extractLocalKey } from "../../../../../core/data/utilities/CompositeKey";
import { makeSlug } from "../../../../../utilities/slug";

@Component({
  selector: "omnia-edit-property",
  styleUrls: ["./editProperty.component.css"],
  templateUrl: "./editProperty.component.html"
})
export class EditPropertyComponent implements OnChanges {

  public form: FormGroup;

  @Input() public target: IPropertyEditInfo;

  public dataTypes = Object.keys(DataTypes);
  public comparabilities = Object.keys(Comparability);

  public metadataComponentType: Type<any>;
  public currentMetadata: any;

  private metadataCache: { [type: string]: any } = {};
  private currentDataType: DataTypes;

  constructor(
    private formBuilder: FormBuilder,
  ) {
    this.form = formBuilder.group({
      key: [""],
      isObsolete: [false],
      name: [""],
      type: [this.currentDataType = DataTypes.String],
      comparability: [Comparability.NotComparable],
      description: [""],
      autoGenerateKey: false
    });

    const keyControl = this.form.get("key");
    keyControl.disable();

    const autoGenerateKeyControl = this.form.get("autoGenerateKey");
    autoGenerateKeyControl.valueChanges.forEach(
      value => {

        if (value) {
          this.updateAutoGeneratedKey();
        }

        this.updateKeyControlAvailability();
      }
    );

    this.form.get("name").valueChanges.forEach(
      value => {
        if (autoGenerateKeyControl.value) {
          this.updateAutoGeneratedKey();
        }
      }
    );

    this.form.get("type").valueChanges.forEach(
      value => {
        if (value === this.currentDataType) {
          return;
        }
        this.metadataCache[this.currentDataType] = this.currentMetadata;
        this.metadataComponentType = GetMetadataComponentType(value);
        this.currentMetadata = this.metadataCache[value] || {};
        this.currentDataType = value;
      }
    );
  }

  public ngOnChanges(changes: SimpleChanges): void {
    if (this.target) {

      const property = this.target.property;

      this.currentMetadata = property.metadata || {};
      this.metadataCache = { [property.type]: property.metadata };
      this.currentDataType = property.type;
      this.metadataComponentType = GetMetadataComponentType(property.type);

      const localKey = extractLocalKey(property.key);

      this.form.get("autoGenerateKey").setValue(
        this.target.allowKeyEdit
        && (localKey.length === 0 || localKey === makeSlug(property.name)));
      this.form.get("name").setValue(property.name);
      this.form.get("key").setValue(localKey);

      this.form.get("isObsolete").setValue(property.isObsolete);
      this.form.get("type").setValue(property.type);
      this.form.get("comparability").setValue(property.comparability);
      this.form.get("description").setValue(property.description);

      this.updateKeyControlAvailability();
      this.updateAutoGenerateKeyControlAvailability();

    }
  }

  public onSubmit(): void {
    const property = this.target.property;
    property.key = `${property.aspectKey}.${this.form.get("key").value}`;
    property.isObsolete = this.form.get("isObsolete").value;
    property.name = this.form.get("name").value;
    property.type = this.form.get("type").value;
    property.comparability = this.form.get("comparability").value;
    property.description = this.form.get("description").value;
    property.metadata = this.currentMetadata;
  }

  private updateKeyControlAvailability(): void {
    const keyControl = this.form.get("key");
    if (this.target.allowKeyEdit && this.form.get("autoGenerateKey").value === true) {
      keyControl.enable();
    } else {
      keyControl.disable();
    }
  }

  private updateAutoGenerateKeyControlAvailability(): void {
    const autoGenerateKeyControl = this.form.get("autoGenerateKey");
    if (this.target.allowKeyEdit) {
      autoGenerateKeyControl.enable();
    } else {
      autoGenerateKeyControl.disable();
    }
  }

  private updateAutoGeneratedKey(): void {
    if (this.target.allowKeyEdit) {
      this.form.get("key").setValue(makeSlug(this.form.get("name").value));
    }
  }

}
